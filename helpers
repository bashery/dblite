package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"

	"github.com/melbahja/goph"
)
type Bot struct {
	Owner   string `json:"owner"`
	Address string `json:"address"`
	Active  bool   `json:"active"`
}

// File copies a single file from src to dst
func (Helper) copyLocalFile(src, dst string) error {
	var err error
	var srcfd *os.File
	var dstfd *os.File
	var srcinfo os.FileInfo

	if srcfd, err = os.Open(src); err != nil {
		return err
	}
	defer srcfd.Close()

	if dstfd, err = os.Create(dst); err != nil {
		return err
	}
	defer dstfd.Close()

	if _, err = io.Copy(dstfd, srcfd); err != nil {
		return err
	}
	if srcinfo, err = os.Stat(src); err != nil {
		return err
	}
	return os.Chmod(dst, srcinfo.Mode())
}



// may be not need this func
// Copies a file. and rename to name with .cp saffix
func (Helper) copyFile(src string) error {
	// Open the source file for reading
	source, err := os.Open(src)
	if err != nil {
		return err
	}
	defer source.Close()

	// Open the destination file for writing
	d, err := os.Create(src + ".cp")
	if err != nil {
		return err
	}

	// Copy the contents of the source file into the destination file
	if _, err := io.Copy(d, source); err != nil {
		d.Close()
		return err
	}

	// Return any errors that result from closing the destination file
	// Will return nil if no errors occurred
	return d.Close()
}



// TODO test localzip function
//  zipfile.zip and clientName
func (Helper) zipLocalDir(source string) error {
	// 1. Create a ZIP file and zip.Writer
	f, err := os.Create(source + "-bot.zip")
	if err != nil {
		return err
	}
	defer f.Close()

	writer := zip.NewWriter(f)
	defer writer.Close()

	// 2. Go through all the files of the source
	return filepath.Walk(source+"-bot", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// 3. Create a local file header
		header, err := zip.FileInfoHeader(info)
		if err != nil {
			return err
		}

		// set compression
		header.Method = zip.Deflate

		// 4. Set relative path of a file as the header name
		header.Name, err = filepath.Rel(filepath.Dir(source), path)
		if err != nil {
			return err
		}
		if info.IsDir() {
			header.Name += "/"
		}

		// 5. Create writer for the file header and save content of the file
		headerWriter, err := writer.CreateHeader(header)
		if err != nil {
			return err
		}

		if info.IsDir() {
			return nil
		}

		f, err := os.Open(path)
		if err != nil {
			return err
		}
		defer f.Close()

		_, err = io.Copy(headerWriter, f)
		if err != nil {
			return err
		}
		return nil

	})
}



// activeHosts filter hosts and return just active hostes
func (Helper) activeHosts(bots []Bot) []Bot {

	activeBots := make([]Bot, 0)
	for _, bot := range bots {
		if bot.Active {
			activeBots = append(activeBots, bot)
		} else {
			h.appendAddr("disactive.host", bot.Address)
		}
	}
	return activeBots
}

// deploy deploy client-bot.zip to client host
func deploy(clientBot, hostBot string) error {
	sshClient, err := goph.NewUnknown("root", hostBot, goph.Password(h.getPass()))
	if err != nil {
		return err
	}

	clientBot = clientBot + "-bot.zip"

	fmt.Println(clientBot)
	err = sshClient.Upload(clientBot, clientBot)
	if err != nil {
		return err
	}

	return nil
}

// clientInStatus if client or host are in status
func clientInStatus(owner string, bots *[]Bot) bool {
	for _, bot := range *bots {
		if owner == bot.Owner {
			return true
		}
	}
	return false
}

// InStatus if client or host are in status
func (h Helper) hostInStatus(host string, bots *[]Bot) bool {
	for _, bot := range *bots {
		if host == bot.Address {
			return true
		}
	}
	return false
}

// updateStatusf update status file
func updateStatusf(data []byte) error {
	if err := os.WriteFile(statusfile, []byte(data), 0644); err != nil {
		return (err)
	}
	return nil
}

// return list of bots type
func loadStatus() ([]Bot, error) {

	bots := make([]Bot, 5)
	data, err := ioutil.ReadFile(statusfile)
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(data, &bots)
	if err != nil {
		return nil, err
	}
	return bots, nil
}

// send exitbot
func sendExit(address string) {
	resp, err := http.Get("http://" + address + "/exit")
	if err != nil {
		log.Fatal("Error getting response. ", err)
	}
	defer resp.Body.Close()

	// Read body from response
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("Error reading response. ", err)
	}

	fmt.Printf("body is : %s\n", body)
}


// copyDir copies local botLine directory
// this is copies a whole directory recursively
func (Helper) copyLocalDir(src string, dst string) error {
	dst = dst + "-bot"
	var err error
	var fds []os.FileInfo
	var srcinfo os.FileInfo

	if srcinfo, err = os.Stat(src); err != nil {
		fmt.Println("err: os.Stat")
		return err
	}

	if err = os.MkdirAll(dst, srcinfo.Mode()); err != nil {
		fmt.Println("err: os.MakeAll")
		return err
	}

	if fds, err = ioutil.ReadDir(src); err != nil {
		fmt.Println("err: ioutil.ReadDir")
		return err
	}
	for _, fd := range fds {
		srcfp := path.Join(src, fd.Name())
		dstfp := path.Join(dst, fd.Name())

		if fd.IsDir() {
			if err = h.copyLocalDir(srcfp, dstfp); err != nil {

				fmt.Println("err: recoursive 1")
				fmt.Println(err)
			}
		} else {
			if err = h.copyLocalFile(srcfp, dstfp); err != nil {
				fmt.Println("err: recoursive 2")
				fmt.Println(err)
			}
		}
	}

	// creat a new file that containe client info,
	clientInfo, err := os.Create(dst + "/" + dst + ".info")
	if err != nil {

		fmt.Println("creat file info when copping dir")
		return err
	}
	defer clientInfo.Close()
	clientInfo.WriteString(dst)

	return nil
}
